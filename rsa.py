# -*- coding: utf-8 -*-
"""rsa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10s6JiQy_oyUBtoH9U6P2A4XswN_qp9k7
"""

import streamlit as st
from sympy import randprime, mod_inverse

# ---- ヘルプ関数 ----
def text_to_numbers(text):
    # A→00, B→01, …, Z→25 に対応
    return ''.join(f"{ord(c)-65:02d}" for c in text)

def numbers_to_text(num_str):
    # 2桁ずつ分割して逆変換
    return ''.join(chr(int(num_str[i:i+2]) + 65)
                   for i in range(0, len(num_str), 2))

# ---- Streamlit UI ----
st.title("🔐 RSA 暗号シミュレータ（一人二役）")

# --- 1) 鍵作成パネル ---
st.header("1. 鍵の作成")
col1, col2 = st.columns(2)

with col1:
    # 生徒に選ばせてもよいし、自動生成も可
    p = st.number_input("素数 p", min_value=3, max_value=10000, value=17, step=2)
    q = st.number_input("素数 q", min_value=3, max_value=10000, value=19, step=2)
with col2:
    e = st.number_input("公開鍵指数 e", min_value=3, max_value=1000, value=5, step=2)

if st.button("鍵を作成"):
    n = p * q
    phi = (p-1)*(q-1)
    # e と φ(n) が互いに素になるように
    if phi % e == 0:
        st.error("e が φ(n) と素でありません。別の e を選んでください。")
    else:
        d = mod_inverse(e, phi)
        st.success(f"公開鍵 (n, e) = ({n}, {e})")
        st.success(f"秘密鍵 d = {d}")

# --- 2) 暗号化パネル ---
st.header("2. 暗号化")
n_enc = st.number_input("公開鍵 n", value=0, step=1)
e_enc = st.number_input("公開鍵 e", value=0, step=1)
plain = st.text_input("平文（大文字5文字まで）", max_chars=5)

if st.button("暗号化", key="enc"):
    num = int(text_to_numbers(plain))
    cipher = pow(num, e_enc, n_enc)
    st.write("平文→数値変換：", num)
    st.write("数値^e mod n→暗号文：", cipher)

# --- 3) 復号パネル ---
st.header("3. 復号")
n_dec = st.number_input("公開鍵 n", value=0, step=1, key="n2")
d_dec = st.number_input("秘密鍵 d", value=0, step=1)
cipher_in = st.text_input("暗号文（数値）", value="", key="c")

if st.button("復号", key="dec"):
    plain_num = pow(int(cipher_in), d_dec, n_dec)
    result = numbers_to_text(f"{plain_num}")
    st.write("暗号文^d mod n→元の数値：", plain_num)
    st.write("数値→平文：", result)